import os
import pathlib

import sqlalchemy as sa
from litestar import Litestar

from app import db, tinkoff_csv
from app.consts import MOSCOW_TIMEZONE

TRANSACTIONS_CSV_PATH = pathlib.Path(os.environ["TRANSACTIONS_CSV_PATH"])

async def load_tinkoff_transactions(app: Litestar):
    async with db.config.get_session() as session:
        statement = sa.select(sa.func.count()).select_from(db.Transaction)
        count = await session.execute(statement)
        if not count.scalar():
            transactions = tinkoff_csv.parse_transactions_csv(TRANSACTIONS_CSV_PATH)

            for raw_transaction in transactions:
                session.add(
                    db.Transaction(
                        datetime=raw_transaction.transaction_datetime.replace(tzinfo=MOSCOW_TIMEZONE),
                        status=db.TransactionStatus(raw_transaction.status),
                        amount=raw_transaction.transaction_amount,
                        currency=raw_transaction.transaction_currency,
                        description=f"{raw_transaction.category} ‚Ä¢ {raw_transaction.description}",
                        tinkoff_transaction=raw_transaction.model_dump(),
                    )
                )

            await session.commit()


async def load_base_categories(app: Litestar):
    OUTCOME_CATEGORIES = [
        "üè† –ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "üì† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
        "üõí –ü—Ä–æ–¥—É–∫—Ç—ã –∏ –±—ã—Ç",
        "üöï –¢–∞–∫—Å–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "üëñ –û–¥–µ–∂–¥–∞, –æ–±—É–≤—å, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç",
        "üß¥ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π",
        "üçî –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã",
        "üßë‚Äçüç≥ –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "üíª –°–µ—Ä–≤–∏—Å—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
        "üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
        "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        "üêï –î–∞—Ä—Å–∏",
        "üèù –û—Ç–ø—É—Å–∫",
        "‚òïÔ∏è –ö–æ—Ñ–µ –¥–æ–º–∞",
        "üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã",
        "üì¶ –ü—Ä–æ—á–µ–µ",
        "üè¶ –ö—Ä–µ–¥–∏—Ç—ã",
    ]
    INCOME_CATEGORIES = [
        "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞",
        "ü§ë –ö—ç—à–±–µ–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã",
        "ü™ô –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
    ]
    async with db.config.get_session() as session:
        statement = sa.select(sa.func.count()).select_from(db.Category)
        count = await session.execute(statement)
        if not count.scalar():
            for raw_category in OUTCOME_CATEGORIES:
                icon, name = raw_category.split(" ", maxsplit=1)
                session.add(db.Category(icon=icon, name=name, type=db.CategoryType.OUTCOME))
            for raw_category in INCOME_CATEGORIES:
                icon, name = raw_category.split(" ", maxsplit=1)
                session.add(db.Category(icon=icon, name=name, type=db.CategoryType.INCOME))
            session.add(db.Category(icon="", name="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
            await session.commit()
